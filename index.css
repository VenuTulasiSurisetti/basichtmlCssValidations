*{
    padding: 0;
    margin: 0;
    box-sizing: border-box;
  }
  html {
    font-size: 16px;
    font-weight: 300;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,
      Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    line-height: 1.5;
    color: #eee;
    background-color: #333;
  }
  body {
    background-color: rgb(242, 234, 234);
    min-height: 100vh;
  }
  header {
    padding: 1rem 2rem;
  }
  h1 {
    color: orange;
  }
  h2 {
    color: orangered;
  }
  form {
    max-width: 600px;
  }
  form > p {
    padding: 1rem 2rem;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: flex-start;
    box-sizing: border-box;
    /* for the underlay */
    position: relative;
    z-index: 1;
    overflow: hidden;
    /* for the label to inherit */
    color: rgb(14, 13, 13);
    font-weight:bold;
  }
  form p::before {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: -1;
    background-color: hsla(200, 10%, 50%, 0.64);
/* background color of the form  */
    transform: translateX(-110%);
/* giving the background color only to selected p input */
    transition: transform 0.2s ease-out;
/* giving the slow timing to get the background color completely . */
  
  }
  form p:focus-within {
    /* for the label to inherit */
    color: #fff;
    text-shadow: 1px 1px 1px #000;
    /* when we click on the input , this will work and focuses according to 
    attributes color changes to white , text will get the shadow .  */
  }
  form p:focus-within::before {
    transform: translateX(0);
  }
  label {
    font-size: 1.2rem;
    flex-basis: 30%;
    padding: 0.25rem 1px;
    text-align: start;
    /* in cooperation with form p:focus-within */
    color: inherit;
    text-shadow: inherit;
  }
  input {
    font-size: 1.2rem;
    flex-basis: 100%;
    width: calc(100% - 2px);
    padding: 0.25rem 1rem;
    border-radius: 0.25rem;
  }
  select,
  option {
    font-size: 1.2rem;
    flex-basis: 100%;
    width: calc(100% - 2px);
    padding: 0.25rem 1rem;
  }
  button {
    border-radius: 0.25rem;
    background-color: rgb(100, 189, 237);
    color: #fff;
    flex-basis: 100%;
    width: calc(20% - 2px);
    padding: 0.5rem 1rem;
    font-size: 1.5rem;
    
    
  }
  .instructions {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: flex-start;
    color: rgb(14, 2, 2);
  }
  .instructions span {
    padding-left: 2rem;
  }
  input:focus,
  select:focus,
  textarea:focus {
    /* field currently has focus */
    background-color:rgb(234, 231, 217);
  }
  /* input:read-only {
    /* field marked as read-only */
  /* } */
  /* input:read-write { */
    /* not disabled or read-only */
  /* } */
  /* input:disabled { */
    /* disabled attribute in html element */
  /* }  */
  input:required,
  select:required,
  option:required {
    /* input field IS marked as required */
    border-color: rgb(10, 15, 12);
  }
  /* input:optional { */
    /* input field not marked as required */
  /* } */
  :placeholder-shown {
    /* placeholder is showing... not user text */
    background-color: rgb(248, 245, 245);
  }
  ::placeholder {
    /* style the placeholder text */
    letter-spacing: 0.3rem;
  }
  input:valid {
    /* passed all validation based on validityState properties */
    background-color: rgb(182, 237, 100);
  }
  input:invalid {
    /* failed some validation */
    border-left: 4px solid hsl(0, 92%, 47%);
    background-color: hsl(0, 100%, 99%);
  }
  /* :in-range { */
    /* value is the right length and not too long or short */
  /* } */
  :out-of-range {
    /* value too short, too long, too small or too big */
    border-right: 2rem solid black;
  }
  
  /*
    
  */